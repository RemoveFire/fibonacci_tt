Описание действий:

1. Обдуманное и спокойное решение

Необходимо с холодной головой произвести анализ работы, нацеленный на поиск ответа. Однозначно, такое решение не является эффективным.

В первую очередь, необходимо убедится, что дефект присутсвует или/и устранен. 
Если будет управлять паника, то мало того, что вы не сможете этого сделать, но наоборот, не проведете исследование и тестирование до конца.

2. Воиспроизведение проблемы/дефекта

Если о наличии дефекте на готовом сайте сообщил заказчик или другой сотрудник команды, сразу же попытайтесь его воспроизвести.
Возможно, это ошибка пользователя или проблема конфигурации. 

Также следует проверить на воспроизведение ошибок, для начала необходимо понять что за ошибка. В браузере есть стандартные коды ошибок 40Х, 50Х. 
Например, 404 ошибка означает, что такой страницы не существует, что в свою очередь означает, что пользователь переходит по не правильному URL.
Если ошибки 50Х, то это уже ошибки относящиеся к стороне сервера, соответственно и решать проблему необходимо со стороны сервера, 
т.е. отдаем back-end команде разработчикам, для просмотра в консоли логов и определения/исправления ошибки.

Если код ошибки не пишется, то открываем консоль в браузере и смотрим ответ по данному запросу, где указывается статус загрузки страницы.

Необходимо проверить, выполнили ли вы все шаги, заданные пользователем и, если возможно, убедиться,
что вы используете то же программное обеспечение и аппаратное обеспечение, что и заказчик (пользователь).

Например, откройте продукт на смартфоне того же типа и используйте ту же сборку или зайдите в браузере установив нужны параметры начиная от модели и разрешения экрана.
Если проблема не воспроизводится, подайте запрос на получение дополнительных данных и пробуйте дальше.

3. Необходимость получения максимальной информации

После воспроизведения ошибки, попытайтесь узнать всё об этой проблеме: воспроизводится ли она в предыдущей сборке, воспроизводится ли на тест-стенде,
возникает ли она в определенном браузере (операционной системе, нужны ли конкретные параметры конфигурации для ее воспроизведения и т. д.).
Чем больше данных вы узнаете, тем скорее дефект будет исправлен разработчиками.

4. Поиск причины

Разработчики уже активно работают над определением причины возникновения проблемы.
После того, как первопричина будет найдена, ваша задача, как тестировщика, в обхятелньном порядке узнать, что это было и каким образом произошло,
даже если информации от пользователя была максимально корректной.

После этих действий вы сможете понять и, вам будет ясно, как тестировать исправленный дефект и какие тесты лучше использовать.


5. Определение момента исправления ошибки/дефекта (когда исправлять)

К примеру, дефект обнаруживается на готовом сайте, хочется как можно скорее его исправить, но это не всегда правильно.
Часто случается так, что исправление одной ошибки порождает возникновение новых. Изначально, необходимо проверить все сферы, на которые мог повлиять этот дефект.

Первоначально необходимо определить, какого масштаба проблема и скольких пользователей затронуло, а только после приступать к исправлению.
Ведь вполне возможно, что затронутых пользователей окажется 0,5% или 1% пользователей и проблема окажется не столь существенной.
Если же есть ограничения пользования продуктом из-за проблемы или вовсе нет возможности пользоваться продуктом, возможно, следует приступить к исправлению немедленно.
А если, к примеру, проблема касается всех пользователей, но она настолько мизерная, что на эксплуатацию приложения не влияет.

6. Исправления хорошо, а проверка исправлений лучше

Тестируя исправленную ошибку, делайте это несколько раз, ведь необходимо убедиться, проверив все возможные для использования устройства и браузеры.
И только затем выполните регресс-тесты в тех местах, которые могли повлиять на код.

Если вы добросовестно выполнили действие 4, то знаете, какие области следует проверить.
И, напоследок, правильным будет провести дымовой тест для того, чтобы убедится, что функционал приложения не нарушен.

7. Анализ (что могло на эту ситуацию повлиять, что случилось)

Есть очень важный момент: нужно проанализировать ситуацию и постараться определить, как проблема попала на готовый сайт.
Ведь нам необходимо понять, как это произошло, чтобы в будущем подобного случая не было.

Проблем может быть множества, ведь исправляя в одном месте, не проверив в другом, если эта часть кода там затрагивается, то возможно повлияет и на другие проблемы.
Тестируя, к примеру, определенную функцию сайта, не проверив все браузеры, расширения экранов и только в одном из мест может находится дефект, при определенных параметрах.
Возможно, разработчики внесли изменения в код и не оповестили вас об этом, для тестирования, как следуствие при релизе возможно появление дефекта.

И самое главное, убедитесь, что проблема была правильно донесена своей команде.

8. Проблема решена, необходимо предотвращение всех подобных проблем

Возможно, следует изменить процесс и стратегию, чтобы избежать в дальнейшем подобных проблем. В первую очередь, это необходимо обсудить с командой.
Возможно стоит внести изменения в процесс и после каждого добавления функций, давать информацию владельцу, для убеждения того, что ничего не упущено.
Или же необходима отмашка от разработчиков, после каждого изменения кода, даже если это изменения не столь обширны, как им может казаться.
Естественно, лучше всего это сделать с командой.
